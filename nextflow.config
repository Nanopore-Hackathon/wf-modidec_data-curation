//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


//Global Default params
params {
    // required input
    basecalling = true
    pod5_files = ""
    outdir="output"
    flowcell_type="RNA004"

    // data for training
    mod_mapping = true
    basecalling = false
    modified_data = true
    use_modified_region = true
    training_out = "training_out_test"
    mod_type = "Gm"
    mod_pos = 50
    mod_list = "Gm m6A Ino Psi"
    curation_type = "Analysis"

    // segementation params
    batch_size = 16 
    max_seq_length = 40
    chunk_length = 400
    time_shift = 25
    start_read_num = 0
    end_read_num = 1000
  
    wf{
        example_cmd = [
            ""
        ]
    }
}

docker_hub {
    // Dockerhub repository to use
    repo = 'stegiopast'
}

// This defines the container to use for each submodule based on the labels
// TODO: Change the container paths to "${docker_hub.repo}/imagename:${docker_hub.imagename_tag}"
process {
    withLabel:modidec_dacu {
        container = "${docker_hub.repo}/modidec:latest"
    }
    withLabel:dorado_basecaller {
        container = "ontresearch/dorado:shada39cafbee40826d83076f28b596ab59dc3d7211"
        maxForks = null
        containerOptions = "-e NVIDIA_DRIVER_CAPABILITIES=compute,utility --gpus all --user \$(id -u):\$(id -g) --group-add 100"
    }
}


// Configuration profiles (should be extended by docker profile and optimised for the various run envionments)
profiles {
    conda {
        conda.enabled = false
    }

    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    overwrite = true
    file    = "${params.outdir}/PIPELINE_INFO/execution_timeline.html"
}
report {
    enabled = true
    overwrite = true
    file    = "${params.outdir}/PIPELINE_INFO/execution_report.html"
}
trace {
    enabled = true
    overwrite = true
    file    = "${params.outdir}/PIPELINE_INFO/execution_trace.txt"
}
dag {
    enabled = true
    overwrite = true
    file    = "${params.outdir}/PIPELINE_INFO/pipeline_dag.html"
}

// Function to ensure that resource requirements don't exceed the limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

manifest {
    name            = 'modidec'
    author          = 'Nicolo Alagna, Andre Holzer, Stefan Pastore'
    homePage        = 'https://github.com/stegiopast/wf-modidec_analysis'
    description     = 'Modification classifier for RNA molecules'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.2'
    version         = 'v0.1'
    defaultBranch   = 'main'
}
